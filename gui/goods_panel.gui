# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types goods_panel_types
{
	type goods_panel = default_block_window_two_lines {
		name = "goods_panel"
		
		blockoverride "window_header_name"
		{
			text = "[GoodsPanel.GetGoods.GetName]"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "GOODS_PANEL_LINE_TWO"
		}
		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[GoodsPanel.AccessGoods.AccessMarket]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenMarketPanel(GoodsPanel.AccessGoods.AccessMarket)]"
				tooltip = "GO_TO_BUTTON_MARKET"
			}
		}
		
		blockoverride "fixed_top"{

			tab_buttons = {
				
				# OBS! these 3 tabs are copied to goods_panel.gui / goods_usage_panel.gui / goods_state_panel.gui
				# consider merging these panels into the same panel

				# market (SELECTED)
				blockoverride "first_button_selected" {
					text = "[GoodsPanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_visibility" {
					visible = yes
				}

				# usage / application
				blockoverride "second_button" {
					text = USAGE
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsUsagePanel(GoodsPanel.GetGoods)]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = yes
				}

				# states
				blockoverride "third_button" {
					text = "[GoodsPanel.GetGoods.GetState.GetNameNoFormatting]"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsStatePanel( GoodsPanel.GetGoods.GetState, GoodsPanel.GetGoods )]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[GoodsPanel.GetGoods.HasStateContext]"
				}
			}
		}

		blockoverride "fixed_bottom"{
			fixed_bottom_spacer = {}
			flowcontainer = {
				direction = horizontal
				spacing = 10
				datacontext = "[GoodsPanel.AccessGoods]"
				button = {
					using = default_button
					size = { 260 70 }
					
					icon = {
						texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
						size = { 40 40 }
						position = { 0 3 }
						parentanchor = hcenter
					}
					textbox = {
						text = "NEW_IMPORT_ROUTE"
						size = { 100% 30 }
						position = { 0 -3 }
						parentanchor = bottom
						margin = { 10 0 }
						elide = right
						align = center|nobaseline
					}
					
					using = shimmer
					blockoverride "shimmer_visibility" {
						visible = "[Goods.CanEstablishImportTradeRoute]"
					}
					enabled = "[Goods.CanEstablishImportTradeRoute]"
					onclick = "[Goods.EstablishImportTradeRoute]"
					tooltip = "ESTABLISH_IMPORT_ROUTE_TOOLTIP"
					visible = "[Goods.IsTradeable]"
				}
				button = {
					using = default_button
					size = { 260 70 }
					
					icon = {
						texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
						size = { 40 40 }
						position = { 0 3 }
						parentanchor = hcenter
					}
					textbox = {
						text = "NEW_EXPORT_ROUTE"
						size = { 100% 30 }
						position = { 0 -3 }
						parentanchor = bottom
						margin = { 10 0 }
						elide = right
						align = center|nobaseline
					}
					
					using = shimmer
					blockoverride "shimmer_visibility" {
						visible = "[Goods.CanEstablishExportTradeRoute]"
					}
					enabled = "[Goods.CanEstablishExportTradeRoute]"
					onclick = "[Goods.EstablishExportTradeRoute]"
					tooltip = "ESTABLISH_EXPORT_ROUTE_TOOLTIP"
					visible = "[Goods.IsTradeable]"
				}
			}
		}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter
				
				flowcontainer = {
					margin_top = 10
					minimumsize = { @panel_width -1 }
					using = default_list_position
					direction = vertical
					datacontext = "[GoodsPanel.AccessGoods]"


					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						good_icon_and_prize = {}

						map_modes_minimized = {
							parentanchor = right
							position = { -5 0 }
							
						blockoverride "first_button_click" {
							onclick = "[GoodsPanel.ShowGoodsPotentials]"
						}
						blockoverride "first_button_selected" {
							visible = "[GoodsPanel.IsShowingGoodsPotentials]"
						}
						blockoverride "first_button_not_selected" {
							visible = "[Not(GoodsPanel.IsShowingGoodsPotentials)]"
						}
						blockoverride "first_button_icon" {
							texture = "gfx/interface/icons/map_mode_icons/potentials.dds"
						}
						blockoverride "first_button_text" {
							text = "MAP_MODE_POTENTIALS"
						}
						blockoverride "second_button_click" {
							onclick = "[GoodsPanel.ShowGoodsProduction]"
						}
						blockoverride "second_button_selected" {
							visible = "[GoodsPanel.IsShowingGoodsProduction]"
						}
						blockoverride "second_button_not_selected" {
							visible = "[Not(GoodsPanel.IsShowingGoodsProduction)]"
						}
						blockoverride "second_button_icon" {
							texture = "gfx/interface/icons/map_mode_icons/production.dds"
						}
						blockoverride "second_button_text" {
							text = "MAP_MODE_PRODUCTION"
						}
						blockoverride "third_button_click" {
							onclick = "[GoodsPanel.ShowGoodsConsumption]"
						}
						blockoverride "third_button_selected" {
							visible = "[GoodsPanel.IsShowingGoodsConsumption]"
						}
						blockoverride "third_button_not_selected" {
							visible = "[Not(GoodsPanel.IsShowingGoodsConsumption)]"
						}
						blockoverride "third_button_icon" {
							texture = "gfx/interface/icons/map_mode_icons/consumption.dds"
						}
						blockoverride "third_button_text" {
							text = "MAP_MODE_CONSUMPTION"
						}
					}
					}
					
					widget = { size = { 5 5 }}
					
					widget = {
						size = { @panel_width 60 }
						parentanchor = hcenter
						
						background = {
							using = entry_bg_simple
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10
							margin = { 15 0 }
							
							textbox = {
								autoresize = yes
								align = nobaseline
								text = "BUDGET_TARIFFS"
							}
							
							container = {
								name = "tutorial_highlight_market_goods_policy"
								set_level_bar_market_tariffs = {}
							}
							
							textbox = {
								layoutpolicy_horizontal = expanding
								align = right|nobaseline
								text = "BUDGET_CONSUMPTION_TAXES"
							}
							
							consumption_tax_button_toggle = {
								visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket))]"
								enabled = "[Not(IsValid( Goods.ToggleTaxation(GetMetaPlayer.GetPlayedOrObservedCountry)))]"
								tooltip = "NOT_PLAYER_MARKET_CONSUMPTION_TAXES"
							}
							consumption_tax_button_toggle = {
								visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket)]"
								enabled = "[IsValid( Goods.ToggleTaxation(GetMetaPlayer.GetPlayedOrObservedCountry) )]"
								tooltip = "[Goods.GetTaxDesc(GetMetaPlayer.GetPlayedOrObservedCountry)]"
							}
						}
					}
						
					### GRAPH LINE
					v3_plotline = {
						using = default_list_position

						blockoverride "size" {
							size = { 360 100 }
						}
						blockoverride "header" {
							text = "PRICE"
						}
						blockoverride "line_color" {
							color = { .9 .9 .9 1.0 }
						}
						blockoverride "line_plotpoints" {
							visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
							plotpoints = "[GetTrendPlotPointsNormalized( Goods.GetPriceTrend, Goods.GetMinPrice, Goods.GetMaxPrice )]"
						}
						blockoverride "maxvalue" {
							text = "[Goods.GetMaxPrice]"
						}
						blockoverride "minvalue" {
							text = "[Goods.GetMinPrice]"
						}
						blockoverride "startdate" {
							text = "[GetOldestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "enddate" {
							text = "[GetLatestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "multiitem" {}
						
						blockoverride "extra_plotlines" {
							### Base Price line
							plotline = {
								size = { 100% 100% }
								using = plot_line
								width = 1
								color = { 0.2 0.2 0.9 1.0 }
								plotpoints = "[Goods.GetBasePricePlotPoints]"
							}
						}
						blockoverride "empty_state_visibility" {
							visible = "[IsEmpty(Goods.GetPriceTrend)]"
						}
						blockoverride "empty_state_text" {
							text = "GRAPH_NOT_INITIALIZED"
						}
					}

					### BOUGHT BY / SOLD BY
					flowcontainer = {
						margin_top = 10
						using = default_list_position
						
						### SOLD BY LIST
						market_orders_list = {}
						
						vertical_divider_full = {}
						
						### BOUGHT BY LIST
						market_orders_list = {
							blockoverride "header_text" {
								text = "BOUGHT_BY"
							}
							blockoverride "alpha_summary_orders" {
								alpha = "[TransparentIfZero(GoodsPanel.AccessOutputValuesTotal)]"
							}
							blockoverride "label_summary_orders" {
								text = "BUY_ORDERS"
							}
							blockoverride "label_tooltip_orders" {
								tooltip = "GOODS_MARKET_BUY_ORDERS_BREAKDOWN"
							}							
							blockoverride "value_summary_orders" {
								text = "[GoodsPanel.AccessOutputValuesTotal|D]"
							}
							blockoverride "datamodel_orders" {
								datamodel = "[GoodsPanel.AccessOutputValues]"
							}
						}
					}
					
#↓↓↓↓↓↓↓↓↓↓↓ ADDED BY THE MOD ↓↓↓↓↓↓↓↓↓↓↓
					### TRADE ROUTES
					flowcontainer = {
						direction = vertical
						using = default_list_position
						margin_top = 10
						
						#↓↓↓↓↓↓ wrapper for players' trade routes ↓↓↓↓↓↓↓
						flowcontainer = {
							direction = vertical
											
							datamodel = "[GoodsPanel.AccessGoods.AccessMarket.AccessAllGoodsWithTradeRoutes]"
							item={
								market_goods_looper_player = {}
							}
						}
						#↑↑↑↑↑↑ wrapper for players' trade routes ↑↑↑↑↑↑				

						#↓↓↓↓↓↓ wrapper for others' trade routes ↓↓↓↓↓↓
						flowcontainer = {
							direction = vertical
							
							datamodel = "[GoodsPanel.AccessGoods.AccessMarket.AccessAllGoodsWithTradeRoutes]"
							item = {
								market_goods_looper_others = {}
							}
						}
					}

					
#↑↑↑↑↑↑↑↑↑↑ ADDED BY THE MOD ↑↑↑↑↑↑↑↑↑↑
					
					widget = { size = { 1 20 }}

					### LOCAL PRICES
					default_header = {
						parentanchor = hcenter
						blockoverride "text" {
							text = LOCAL_PRICE_IN
						}
					}

					flowcontainer = {
						datamodel = "[GoodsPanel.AccessGoods.AccessMarket.AccessMarketStates]"
						direction = vertical 
						visible = "[Not(GetVariableSystem.Exists('local_prices'))]"
						using = default_list_position

						item = {
							button = {
								datacontext = "[GoodsPanel.GetGoods.WithStateContext( State.Self )]"
								size = { @panel_width 40 }
								using = clean_button
								onclick = "[InformationPanelBar.OpenGoodsStatePanel(State.Self, GoodsPanel.AccessGoods.Self)]"
								tooltip = "[Goods.GetStatePriceDesc]"

								textbox = {
									text = "[State.GetName]"
									autoresize = yes
									align = nobaseline
									parentanchor = vcenter
									margin_left = 10
								}

								textbox = {
									text = "#variable @money![Goods.GetStatePrice|1]#! [Goods.GetCompareIconAgainstBasePrice( Goods.GetStatePrice )]"
									autoresize = yes
									align = nobaseline
									parentanchor = vcenter|right
									margin_right = 10
								}
							}
						}
					}
				}
				
				not_yet_initialized = {
					visible = "[EqualTo_CFixedPoint(GoodsPanel.GetGoods.GetMarketPrice, '(CFixedPoint)0')]"
				}
			}
		}
	}
	
#↓↓↓↓↓↓↓↓↓↓↓ ADDED BY THE MOD ↓↓↓↓↓↓↓↓↓↓↓	

	# these 'loopers' were added because I don't think there's a direct connection from an instance of Goods to MarketGoods, 
	# therefore we have to acces the Market from Goods, then fetch all MarketGoods in that market and loop through them until we get to the MarketGoods that corresponds to the currently displayed Goods in the GoodsPanel
	type market_goods_looper_player = flowcontainer{
		direction = vertical
		parentanchor = hcenter
		margin_bottom = 5
		margin_top = 5
		max_width = 540
		min_width = 540
		
		default_header = {
			visible = "[And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey),Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes)))]"
			parentanchor = hcenter
			blockoverride "text" {
				text = "TRADE_ROUTES_CONCEPT"
			}
		}
		
		# this is the crucial part where we check whether the list of MarketGoods arrived to the one we are interested in
		visible = "[And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey),Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes)))]"

		background = {
			using = dropdown_background

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_top.dds"
				blend_mode = alphamultiply
				alpha = 1
			}
		}

		textbox = {
			text = "TRADE_ROUTE_PLAYER"
			autoresize = yes
			align = left|nobaseline
			margin_left = 15
			margin_bottom = 5
		}
						
		datamodel = "[MarketGoods.AccessPlayerTradeRoutes]"
		item = {
			traded_good_trade_route2 = {}
		}
		
		#divider_decorative = {
		#	visible = "[And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey),And( Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString ))))]"
		#}
	}
	
	type market_goods_looper_others = flowcontainer{
		direction = vertical
		parentanchor = hcenter
		margin_bottom = 5
		margin_top = 5
		max_width = 540
		min_width = 540
		
		default_header = {
			visible = "[And(And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey),Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes))),IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes))]"
			parentanchor = hcenter
			blockoverride "text" {
				text = "TRADE_ROUTES_CONCEPT"
			}
		}
		
		visible = "[And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey), Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)))]"

		background = {
			using = dropdown_background

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_top.dds"
				blend_mode = alphamultiply
				alpha = 1
			}
		}

		textbox = {
			text = "OTHER_COUNTRIES_TRADE_ROUTES"
			autoresize = yes
			align = left|nobaseline
			margin_left = 15
			margin_bottom = 5
		}
		datamodel = "[MarketGoods.AccessOthersTradeRoutes]"
		item = {
			traded_good_trade_route2 = {}
		}
		
		#divider_decorative = {
		#	visible = "[And(EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey),And( Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString ))))]"
		#}
	}

	#↓↓↓↓↓↓↓↓ 1 trade route in the list ↓↓↓↓↓↓↓↓
	type traded_good_trade_route2 = widget {
		#visible = "[EqualTo_string(MarketGoods.GetGoods.GetKey,Goods.GetKey)]"
		layoutpolicy_horizontal = expanding
		divider_clean = {
			size = { 510 1 }
		}
		
		size = { 510 60 }
		parentanchor = hcenter

		#↓↓↓↓↓↓↓↓ cancel button na pravej strane elementu ↓↓↓↓↓↓↓↓
		button_icon_cancel = {
			size = { 30 30 }
			parentanchor = right|vcenter
			onclick = "[Execute( TradeRoute.Cancel )]"
			visible = "[IsValid( TradeRoute.Cancel )]"
		}
		#↑↑↑↑↑↑↑↑ cancel button na pravej strane elementu ↑↑↑↑↑↑↑↑

		#↓↓↓↓↓↓↓↓ lava cast elementu s vlajkami trhov, buttonom do cieloveho trhu s levelom a mnozstvom, konvojmi, produktivitou ↓↓↓↓↓↓↓↓↓↓↓
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 10 0 }
			spacing = 10
			margin_right = 35


			block "first_flag_or_icon" {
				small_flag = {
					datacontext = "[MarketGoods.GetMarket.GetOwner]"
				}
			}

			widget = {
				size = { 190 50 }

				button = {
					size = { 100% 40 }
					using = clean_button
					using = select_button_sound
					parentanchor = right|vcenter
					tooltip = "TRADE_ROUTE_TOOLTIP"
					onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetOtherMarket(MarketGoods.GetMarket.Self) )]"
					onrightclick = "[RightClickMenuManager.ShowForTradeRoute(TradeRoute.AccessSelf)]"								

					onmousehierarchyenter = "[AccessHighlightManager.HighlightTradeRouteSupplyNetwork( TradeRoute.Self )]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					
					textbox = {
						visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
						autoresize = yes
						text = "GOODS_NUMBER_WITH_TRADE_LEVEL"
						align = nobaseline
						parentanchor = hcenter|vcenter
						margin_left = 20
					}

					textbox = {
						visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
						autoresize = yes
						text = "INACTIVE"
						align = nobaseline
						parentanchor = hcenter|vcenter
						margin_left = 20
					}
				}

				icon = {
					size = { 50 50 }
					parentanchor = left|vcenter
					visible = "[TradeRoute.IsConsideredImportForMarket( MarketGoods.GetMarket.Self )]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
				}

				icon = {
					size = { 50 50 }
					parentanchor = left|vcenter
					visible = "[Not(TradeRoute.IsConsideredImportForMarket( MarketGoods.GetMarket.Self ))]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
				}
			}

			small_flag = {
				datacontext = "[TradeRoute.GetOtherMarket(MarketGoods.GetMarket.Self).GetOwner]"
			}

			textbox = {
				margin_left = 10
				size = { 70 50 }
				align = left|nobaseline
				text = "@convoys! #v [TradeRoute.GetNumUsedConvoys]#!"
				elide = right
				fontsize_min = 12	
				tooltip = "[TradeRoute.GetNumUsedConvoysDesc]"
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				align = left|nobaseline
				text = "@money! #v [TradeRoute.CalcProductivity|1=+]#!"
				tooltip = "[TradeRoute.GetRevenueAfterTariffDesc]"
			}
		}
		#↑↑↑↑↑↑↑↑ lava cast elementu s vlajkami trhov, buttonom do cieloveho trhu s levelom a mnozstvom, konvojmi, produktivitou ↑↑↑↑↑↑↑↑↑↑↑
	}
	#↑↑↑↑↑↑↑↑ 1 trade route in the list ↑↑↑↑↑↑↑↑	

#↑↑↑↑↑↑↑↑↑↑ ADDED BY THE MOD ↑↑↑↑↑↑↑↑↑↑	
	
	
}

types "production_method_items" {
	
	### ICON + PRICE
	type good_icon_and_prize = container {
		minimumsize = { 480 -1 }
		maximumsize = { 480 -1 }
		
		button = {
			position = { 10 0 }
			size = { 100 100 }
			parentanchor = vcenter
			texture = "[Goods.GetTexture]"
			tooltipwidget = {
				FancyTooltip_Goods = {}
			}
			onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
			
			icon = {
				size = { 40 40 }
				visible = "[Goods.HasGoodsShortage]"
				texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
				tooltip = "GOODS_SHORTAGE_TOOLTIP"
			}			
		}		
	
		flowcontainer = {
			position = { 120 0 }
			parentanchor = vcenter
			direction = vertical
			spacing = 5

			textbox = {
				block "compare" {
					text = "[Goods.GetShortCompareDescAgainstBasePrice( Goods.GetMarketPrice )]"
					tooltip = "GOODS_MARKET_PRICE_AGAINST_BASE_PRICE_TOOLTIP"
				}
				autoresize = yes
				using = fontsize_large
				multiline = yes
				maximumsize = { 360 -1 }
				minimumsize = { 360 -1 }
			}
			textbox = {
				block "prize" {
					text = GOODS_PANEL_PRICE_RIGHT_NOW
				}
				autoresize = yes
				multiline = yes
				maximumsize = { 360 -1 }
				minimumsize = { 360 -1 }
				using = fontsize_large
			}
			textbox = {
				block "producer_rank" {
					text = GOODS_LEADERBOARD_STATUS
				}
				autoresize = yes
				multiline = yes
				maximumsize = { 360 -1 }
				minimumsize = { 360 -1 }
				using = fontsize_large
			}
		}
	}
	
	### map modes minimized
	type map_modes_minimized = map_modes {
		onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_map_mode_list','show_map_mode_list')]"
		onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_map_mode_list','hide_map_mode_list')]"
		
		blockoverride "flowcontainer_size" {}
		
		blockoverride "map_mode_button_size" {
			size = { 45 45 }
			
			state = {
				name = show_map_mode_list
				size = { 350 45 }
				duration = 0.2
				using = Animation_Curve_Default
			}
			state = {
				name = hide_map_mode_list
				size = { 45 45 }
				duration = 0.2
				using = Animation_Curve_Default
			}
		}
		
		blockoverride "show_map_mode_list_details" {
			alpha = 0
			
			state = {
				name = show_map_mode_list
				using = default_show_properties
			}
			state = {
				name = hide_map_mode_list
				using = default_hide_properties
			}
		}
	}
	
	### map modes
	type map_modes = flowcontainer {
		direction = vertical
		block "flowcontainer_size" {
			minimumsize = { @panel_width -1 }
		}
		
		# first button
		button = {
			using = default_button_action
			block "first_button_click" {}
			block "map_mode_button_size" {
				size = { 100% 45 }
			}

			textbox = {
				block "first_button_text" {}
				size = { 100% 45 }
				elide = right
				fontsize_min = 12
				margin = { 45 0 }
				align = nobaseline
				block "show_map_mode_list_details" {}
			}

			icon = {
				name = "selected_bg"
				size = { 100% 100% }
				using = highlighted_square_selection
				block "first_button_selected" {}
				
				using = shimmer_fade_in
				blockoverride "trigger" {
					name = selected
				}
			}

			button_radio = {
				frame = 1
				size = {25 25}
				parentanchor = vcenter
				position = {10 0}
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			button_radio = {
				frame = 2
				size = {25 25}
				parentanchor = vcenter
				position = {10 0}
				block "first_button_selected" {}
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			block "right_icon" {
				widget = {
					size = { 35 35 }
					parentanchor = right|vcenter
					position = { -5 0 }
					
			icon = {
						size = { 100 100 }
						parentanchor = center
						using = rotate_glow_animation_02
						block "first_button_selected" {}
						
						state = {
							name = _show
							alpha = 1
							size = { 100 100 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
					
					icon = {
				size = { 35 35 }
						parentanchor = center
				block "first_button_icon" {}
				block "first_button_selected" {}

				state = {
					name = _show
					alpha = 1
					size = { 35 35 }
					duration = 0.2
					using = Animation_Curve_Default
				}

				state = {
					name = _hide
					alpha = 0.7
					size = { 30 30 }
					duration = 0.2
					using = Animation_Curve_Default
				}
			}

			icon = {
				size = { 30 30 }
				alpha = 0.7
						parentanchor = center
				block "first_button_icon" {}
				block "first_button_not_selected" {}

				state = {
					name = _show
					alpha = 0.7
					size = { 30 30 }
					duration = 0.2
					using = Animation_Curve_Default
				}

				state = {
					name = _hide
					alpha = 1
					size = { 35 35 }
					duration = 0.2
					using = Animation_Curve_Default
				}
			}
		}
			}
		}

		# second button
		button = {
			using = default_button_action
			block "second_button_click" {}
			block "map_mode_button_size" {
				size = { 100% 45 }
			}

			textbox = {
				block "second_button_text" {}
				size = { 100% 45 }
				elide = right
				fontsize_min = 12
				margin = { 45 0 }
				align = nobaseline
				block "show_map_mode_list_details" {}
			}

			icon = {
				name = "selected_bg"
				size = { 100% 100% }
				using = highlighted_square_selection
				block "second_button_selected" {}
				
				using = shimmer_fade_in
				blockoverride "trigger" {
					name = selected
				}
			}

			button_radio = {
				frame = 1
				size = {25 25}
				parentanchor = vcenter
				position = {10 0}
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			button_radio = {
				frame = 2
				size = {25 25}
				parentanchor = vcenter
				position = {10 0}
				block "second_button_selected" {}
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			block "right_icon" {
				widget = {
					size = { 35 35 }
					parentanchor = right|vcenter
					position = { -5 0 }
					
			icon = {
						size = { 100 100 }
						parentanchor = center
						using = rotate_glow_animation_02
						block "second_button_selected" {}
						
						state = {
							name = _show
							alpha = 1
							size = { 100 100 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
					
					icon = {
				size = { 35 35 }
						parentanchor = center
				block "second_button_icon" {}
				block "second_button_selected" {}

				state = {
					name = _show
					alpha = 1
					size = { 35 35 }
					duration = 0.2
					using = Animation_Curve_Default
				}

				state = {
					name = _hide
					alpha = 0.7
					size = { 30 30 }
					duration = 0.2
					using = Animation_Curve_Default
				}
			}

			icon = {
				size = { 30 30 }
				alpha = 0.7
						parentanchor = center
				block "second_button_icon" {}
				block "second_button_not_selected" {}

				state = {
					name = _show
					alpha = 0.7
					size = { 30 30 }
					duration = 0.2
					using = Animation_Curve_Default
				}

				state = {
					name = _hide
					alpha = 1
					size = { 35 35 }
					duration = 0.2
					using = Animation_Curve_Default
				}
			}
		}
			}
		}

		# third button
		block "third_button" {
			button = {
				using = default_button_action
				block "third_button_click" {}
				block "map_mode_button_size" {
					size = { 100% 45 }
				}

				textbox = {
					block "third_button_text" {}
					size = { 100% 45 }
					elide = right
					fontsize_min = 12
					margin = { 45 0 }
					align = nobaseline
					block "show_map_mode_list_details" {}
				}

				icon = {
					name = "selected_bg"
					size = { 100% 100% }
					using = highlighted_square_selection
					block "third_button_selected" {}
					
					using = shimmer_fade_in
					blockoverride "trigger" {
						name = selected
					}
				}

				button_radio = {
					frame = 1
					size = {25 25}
					parentanchor = vcenter
					position = {10 0}
					alwaystransparent = yes
					block "show_map_mode_list_details" {}
				}

				button_radio = {
					frame = 2
					size = {25 25}
					parentanchor = vcenter
					position = {10 0}
					block "third_button_selected" {}
					alwaystransparent = yes
					block "show_map_mode_list_details" {}
				}

				block "right_icon" {
					widget = {
						size = { 35 35 }
						parentanchor = right|vcenter
						position = { -5 0 }
						
				icon = {
							size = { 100 100 }
							parentanchor = center
							using = rotate_glow_animation_02
							block "third_button_selected" {}
							
							state = {
								name = _show
								alpha = 1
								size = { 100 100 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
						
						icon = {
					size = { 35 35 }
							parentanchor = center
					block "third_button_icon" {}
					block "third_button_selected" {}

					state = {
						name = _show
						alpha = 1
						size = { 35 35 }
						duration = 0.2
						using = Animation_Curve_Default
					}

					state = {
						name = _hide
						alpha = 0.7
						size = { 30 30 }
						duration = 0.2
						using = Animation_Curve_Default
					}
				}

				icon = {
					size = { 30 30 }
					alpha = 0.7
							parentanchor = center
					block "third_button_icon" {}
					block "third_button_not_selected" {}

					state = {
						name = _show
						alpha = 0.7
						size = { 30 30 }
						duration = 0.2
						using = Animation_Curve_Default
					}

					state = {
						name = _hide
						alpha = 1
						size = { 35 35 }
						duration = 0.2
						using = Animation_Curve_Default
					}
				}
			}
		}
	}
		}
	}
	
	### production method item
	type production_method_item = flowcontainer {
		minimumsize = { @panel_width -1 }
		background = {
			using = entry_bg_simple	
		}
		margin = { 5 5 }
		icon = {
			size = { 40 40 }
			texture = "[ProductionMethod.GetTexture]"
			parentanchor = left|vcenter
		}
		textbox = {
			margin_left = 10
			margin_right = 6
			visible = "[GreaterThan_int32( ProductionMethod.GetNumOfBuildingsUsingThis( GetPlayer.Self ), '(int32)0' )]"
			text = "[ProductionMethod.GetNumOfBuildingsUsingThis(GetPlayer.Self)|v]"
			tooltip = "NUM_BUILDINGS_WITH_PROD_METHOD_ACTIVE"
			autoresize = yes
			align = nobaseline
			parentanchor = vcenter
		}

		textbox = {
			autoresize = yes
			align = left|nobaseline
			parentanchor = left|vcenter
			text = "PRODUCTION_METHOD_ITEM"
		}
	}

	### building button
	type producing_building_button = container {
		minimumsize = { 110 110 }
		alpha = "[TransparentIfFalse(BuildingType.HasRequiredTechnologiesInCountry(GetPlayer.Self))]"
		
		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
		
		button = {
			using = default_button
			parentanchor = center
			size = { 100 105 }
			visible = "[BuildingType.IsBuildable]"
			onclick = "[BuildingType.ActivateExpansionLens]"
		}
		
		icon = {
			using = entry_bg_simple
			parentanchor = center
			size = { 100 105 }
			visible = "[Not(BuildingType.IsBuildable)]"
		}
		
		icon = {
			position = { 0 8 }
			size = { 60 60 }
			texture = "[BuildingType.GetTexture]"
			parentanchor = hcenter
		}

		textbox = {
			text = "#BOLD [BuildingType.GetNameNoFormatting]#!"
			align = hcenter|vcenter
			position = { 0 -6 }
			size = { 100% 40 }
			parentanchor = hcenter|bottom
			using = fontsize_small
			elide = right
			multiline = yes
			margin_left = 10
			margin_right = 10
		}

		textbox = {
			visible = "[GreaterThan_int32(BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0')]"
			datacontext = "[BuildingType]"
			text = "BUILDING_TYPE_COUNT"
			size = { 50 25 }
			align = left|nobaseline
			using = fontsize_large
			position = { 10 2 }
			background = {
				using = blurry_dark_background
				margin = { 5 5 }
			}
		}

		textbox = {
			datacontext = "[BuildingType]"
			visible = "[And(BuildingType.IsBuildable, BuildingType.HasRequiredTechnologiesInCountry(GetPlayer.Self))]"
			tooltip = "BUILDING_ACTION_NUMBER"
			text = "#BOLD [BuildingType.GetNumAvailableStatesForBuilding|+]#!"
			align = right|nobaseline
			parentanchor = right
			using = fontsize_large
			autoresize = yes
			position = { -10 2 }
			
			background = {
				using = blurry_dark_background
				margin = { 5 5 }
			}
		}
	}
	
	type market_orders_list = flowcontainer {
		direction = vertical
		minimumsize = { @panel_width_half 1 }
		spacing = 5
		
		#header
		default_header = {
			blockoverride "size"
			{
				size = { @panel_width_plus_14_half 38 }
			}
			blockoverride "text"
			{
				block "header_text" {
					text = "SOLD_BY"
				}
			}
		}
		
		#summary orders
		widget = {
			parentanchor = hcenter			
			datacontext = "[GoodsPanel.AccessGoods]"
			size = { @panel_width_half 40 }
			block "alpha_summary_orders" {
				alpha = "[TransparentIfZero(GoodsPanel.AccessInputValuesTotal)]"
			}
			
			block "label_tooltip_orders" {
				tooltip = "GOODS_MARKET_SELL_ORDERS_BREAKDOWN"
			}
			
			background = {
				using = entry_bg_simple
			}
			
			hbox = {
				margin = { 10 0 }
			
				textbox = {
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = expanding
					size = { 0 35 }
					block "label_summary_orders" {
						text = "SELL_ORDERS"
					}
					align = left|nobaseline
					default_format = "#title"
					using = fontsize_large
					elide = right
					
				}
				textbox = {
					layoutstretchfactor_horizontal = 1
					layoutpolicy_horizontal = preferred
					size = { 0 35 }
					block "value_summary_orders" {
						text = "[GoodsPanel.AccessInputValuesTotal|D]"
					}
					align = right|nobaseline
					using = fontsize_large
					default_format = "#variable"
				}
			}
		}

		#orders
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			minimumsize = { @panel_width_half 1 }
			block "datamodel_orders" {
				datamodel = "[GoodsPanel.AccessInputValues]"
			}
			
			item = {
				widget = {
					size = { @panel_width_half 50 }

					tooltip = "[GoodsPanelValue.GetTooltip]"

					textbox = {
						position = { 10 5 }
						text = "#bold [GoodsPanelValue.GetName]#!"
						autoresize = yes
						align = left|vcenter
						maximumsize = { 200 -1 }
						elide = right
					}
					textbox = {
						text = "[GoodsPanelValue.GetValue|D]"
						autoresize = yes
						align = left|nobaseline
						maximumsize = { 200 -1 }
						elide = right
						parentanchor = right|vcenter
						margin_right = 10
						margin_bottom = 5
					}

					### Reduce / increase trade route level
					container = {
						visible = "[GoodsPanelValue.HasTradeRouteInfo]"
						parentanchor = bottom|left
						position = { 10 -5 }

						widget = {
							size = { 85 25 }

							visible = "[GoodsPanelValue.GetTradeRoute.GetOwner.IsPlayer]"

							block "interactable_background" {
								background = {
									using = entry_bg_simple
								}
							}

							### Current trade route level
							textbox = {
								parentanchor = center
								autoresize = yes
								text = "[GoodsPanelValue.GetTradeRoute.GetLevel|v]"
								align = hcenter|nobaseline
								using = fontsize_large
							}
						}
					}

					divider_clean = {
						parentanchor = bottom|hcenter
					}
				}
			}
		}						
	}
	
	type consumption_tax_button_toggle = button_icon_round_toggle_action {
		size = { 44 44 }

		blockoverride "on_click" {
			onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
		}

		blockoverride "view_1" {
			visible = "[Not(GreaterThan_CFixedPoint(Goods.CalcConsumptionTaxAmount(GetPlayer), '(CFixedPoint)0'))]"
		}
		blockoverride "view_2" {
			visible = "[GreaterThan_CFixedPoint(Goods.CalcConsumptionTaxAmount(GetPlayer), '(CFixedPoint)0')]"
		}
		blockoverride "icon_1" {
			texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
		}

		blockoverride "icon_2" {
			texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
		}	
	}
}
